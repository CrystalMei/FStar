FSTAR_HOME?=..
include $(FSTAR_HOME)/ulib/gmake/z3.mk
include $(FSTAR_HOME)/ulib/gmake/fstar.mk
include $(FSTAR_HOME)/.common.mk
FSTAR=$(FSTAR_HOME)/bin/fstar.exe

#################################################################################
# Customize these variables for your project
#################################################################################

# The root files of your project, from which to begin scanning dependences
FSTAR_FILES ?=

# The paths to related files which to include for scanning
#   -- No need to add FSTAR_HOME/ulib; it is included by default
INCLUDE_PATHS ?=

# The executable file you want to produce
PROGRAM ?=

# A driver in ML to call into your program
TOP_LEVEL_FILE ?=

# A place to put all the emitted .ml files
OUTPUT_DIRECTORY ?= _output

# A place to put all the .checked files
CACHE_DIR ?= _cache

# Additionaly flags to pass to F*, 332 -> abstract usage
OTHERFLAGS += --use_hints --warn_error -332
OTHERFLAGS+=--warn_error -241 # Unable to load XX
OTHERFLAGS+=--warn_error -242 # Definitions of inner let-rec aux and its enclosing top-level letbinding are not encoded to the solver, you will only be able to reason with their types
OTHERFLAGS+=--warn_error -247 # XX.checked does not exist
OTHERFLAGS+=--warn_error -252 # (Hint-replay failed): assertion failed
OTHERFLAGS+=--warn_error -271 # Pattern uses these theory symbols or terms that should not be in an smt pattern
OTHERFLAGS+=--warn_error -285 # No modules in namespace DLL and no file with that name either
OTHERFLAGS+=--warn_error -288 # XX is deprecated
OTHERFLAGS+=--warn_error -321 # Did not expect XX to be already checked, but found it in an unexpected location XX
OTHERFLAGS+=--warn_error -328 # Global binding XX is recursive but not used in its body
OTHERFLAGS+=--warn_error -333 # Unable to open hints file: XX; ran without hints

# Set ADMIT=1 to admit queries
ADMIT ?=
MAYBE_ADMIT = $(if $(ADMIT),--admit_smt_queries true)

################################################################################
# YOU SHOULDN'T NEED TO TOUCH THE REST
################################################################################

VERBOSE_FSTAR=$(BENCHMARK_PRE) $(FSTAR)                     \
		  --cache_checked_modules                   \
		  --odir $(OUTPUT_DIRECTORY)                \
		  --cache_dir $(CACHE_DIR)                  \
		  $(addprefix --include , $(INCLUDE_PATHS)) \
		  $(OTHERFLAGS) $(MAYBE_ADMIT)

# As above, but perhaps with --silent
MY_FSTAR=$(VERBOSE_FSTAR) $(SIL)

#--------------------------------------------------------------------------------
# Default target: verify all FSTAR_FILES
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# Include the .depend before any other target
# since we rely on the dependences it computes in other rules
# #
# We do an indirection via ._depend so we don't write an empty file if
# the dependency analysis failed.
#--------------------------------------------------------------------------------
.depend: $(FSTAR_FILES)
	$(Q)$(MY_FSTAR) --dep full $(FSTAR_FILES) > ._depend
	mv ._depend .depend

depend: .depend

include .depend
#--------------------------------------------------------------------------------

# a.fst.checked is the binary, checked version of a.fst
%.fst.checked:
# @echo "[CHECK     $(basename $(notdir $@))]"
	@d=$$(date +%s) \
	; $(MY_FSTAR) --query_stats $< > Logs/$(basename $(notdir $@)).trace \
	&& echo "$(basename $(notdir $@)),	$$(($$(date +%s)-d))" \
	&& touch -c $@

# a.fsti.checked is the binary, checked version of a.fsti
%.fsti.checked:
# @echo "[CHECK     $(basename $(notdir $@))]"
	@d=$$(date +%s) \
	; $(MY_FSTAR) --query_stats $< > Logs/$(basename $(notdir $@)).trace \
	&& echo "$(basename $(notdir $@)),	$$(($$(date +%s)-d))" \
	&& touch -c $@

%.fst.output: %.fst
	@echo "[OUTPUT    $(basename $(notdir $@))]"
	$(Q)$(VERBOSE_FSTAR) -f --print_expected_failures $< >$@ 2>&1

%.fsti.output: %.fsti
	@echo "[OUTPUT    $(basename $(notdir $@))]"
	$(Q)$(VERBOSE_FSTAR) -f --print_expected_failures $< >$@ 2>&1

clean:
	rm -rf $(CACHE_DIR)
